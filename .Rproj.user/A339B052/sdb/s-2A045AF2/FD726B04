{
    "collab_server" : "",
    "contents" : "#--------------------------------Loading package-------------------------------------------------------------------------------------------\nif(!suppressWarnings(require(shiny))){install.packages(\"shiny\");library(shiny)}\nif(!suppressWarnings(require(sca))){install.packages(\"sca\");library(sca)}\nif(!suppressWarnings(require(dplyr))){install.packages(\"dplyr\");library(dplyr)}\nif(!suppressWarnings(require(Rcpp))){install.packages(\"Rcpp\");library(Rcpp)}\nif(!suppressWarnings(require(ggplot2))){install.packages(\"ggplot2\");library(ggplot2)}\n#-----------------------------Cancel scientific notation-----------------------------------------------------------------------------------\noptions(scipen = 20) \n#---------------------obtain Data----------------------------------------------------------------------------------------------------------\nload(file = \"data\\DATA.rda\")\n#------------------------------------------------------------------------------------------------------------------------------------------\nshinyServer(function(input, output) { \n#-----------------------------------Set All object-----------------------------------------------------------------------------------------\n#====================================================Clear Data===============================================================================\n  #---------------------------------Warning-------------------------------------------------------------------------------------------------\n  waringmessage <- compiler::cmpfun(function(tit, texts, easyClose = TRUE){\n    showModal(modalDialog(\n      title = tit, texts, easyClose = easyClose))\n  })\n  #---------------------------------function------------------------------------------------------------------------------------------------\n  ZHSY <- compiler::cmpfun(function(comb){ \n     NData <- subset(FDATA_1, FDATA_1[, 5] == comb)\n     names(NData) <- c(\"date\", \"scode\", \"w\", \"r\", \"rank\")\n     MData <- cbind(NData[, -5], wr = round(NData$w * NData$r, 4))\n     names(MData) <- c(\"date\", \"scode\", \"w\", \"r\", \"wr\")\n     ZHSY <- aggregate(MData$wr ~ MData$date, MData, sum)\n     ZHSY[, 2] <- round(ZHSY[, 2], 4)\n     ZHSY[which(ZHSY[, 2] > 10)] <- 10\n     ZHSY[which(ZHSY[, 2] < -10)] <- -10\n    return(ZHSY)\n  })\n  #------------------------------------------------------------------------------------------------------------------------------------------\n  cppFunction(\"NumericVector CZHJZ(NumericVector ZHSY, int length){\n                 NumericVector ZHJZ(length + 1);\n                 ZHJZ[0] = 1; \n                 for (int i = 0; i < length; i++){\n                     ZHJZ[i + 1] = ZHJZ[i] * (1 + ZHSY[i + 1]);\n                 }\n                return ZHJZ;\n               }\")\n  ZHJZ <- compiler::cmpfun(function(comb){\n    ZHSY <- ZHSY(comb = input$comb)[-1, 2] / 100\n    CZHJZ <- CZHJZ(ZHSY, length(ZHSY))\n    round(CZHJZ, 4)\n  })\n  #-------------------------------------------------------------------------------------------------------------------------------------------\n  cppFunction(\"NumericVector CMHC(NumericVector ZHJZ, int length){\n                 NumericVector MHC(length);\n                 NumericVector vec(length);\n                 for (int i = 0; i < length; i++){\n                    vec[i] = ZHJZ[i];\n                    MHC[i] = 1 - ZHJZ[i] / max(vec);\n                 }\n                return MHC;\n               }\")\n  MHC <- compiler::cmpfun(function(comb){\n    ZHJZ <- ZHJZ(comb = input$comb) \n    CMHC <- CMHC(ZHJZ, length(ZHJZ))\n    round(CMHC, 4)\n  }) \n  #-----------------------ох--------------------------------------------------------------------------------------------------------------------\n  ZHTSY <- compiler::cmpfun(function(comb){\n    ZHJZ <- ZHJZ(input$comb)\n    ZHTSY <- round((ZHJZ - 1), 4) \n   return(ZHTSY)\n  })\n  #-------------------------------------------------------------------------------------------------------------------------------------------\n  ZHTM <- compiler::cmpfun(function(cash, comb){\n    ZHJZ <- ZHJZ(input$comb)\n    ZHTM <- round(as.numeric(cash) * ZHJZ, 4)\n    return(ZHTM)\n  })\n  #-------------------------------------------------------------------------------------------------------------------------------------------\n  QSR <- compiler::cmpfun(function(comb){\n    ZHSY <- ZHSY(comb = input$comb)\n    ZHJZ <- ZHJZ(comb = input$comb)\n    MHC <- MHC(comb = input$comb)\n    ZHTSY <- ZHTSY(comb = input$comb)\n    ZHTM <- ZHTM(cash = input$cash, comb = input$comb)\n    data.frame(Date = as.character(ZHSY[, 1]), ZHSY = ZHSY[, 2], ZHJZ = ZHJZ, MHC = MHC, ZHTSY = ZHTSY, ZHTM = ZHTM)\n  })\n#=============================================================================================================================================\nQSRInput <- compiler::cmpfun(eventReactive(input$Btn1, {\n   if(!nchar(input$cash)){\n     waringmessage(\"Warning\", \"Please enter cash!\\n\")\n   }  else {\n    QSR(input$comb)\n   }\n  }))\n#============================================Net Figure Drawing===============================================================================\nJZTinput <- compiler::cmpfun(eventReactive(input$Btn2, {\n   if(!nchar(input$cash)){\n     waringmessage(\"Warning\", \"Please enter cash!\\n\")\n   } else {\n    QSR <- QSR(input$comb)\n    ggplot(data = QSR) + \n    geom_rect(mapping = aes(ymin = mean(ZHJZ), ymax = max(ZHJZ), xmin = 0, xmax = length(ZHJZ)), fill = \"palegreen\", alpha = 0.01) +\n    geom_rect(mapping = aes(ymin = min(ZHJZ), ymax = mean(ZHJZ), xmin = 0, xmax = length(ZHJZ)), fill = \"khaki\", alpha = 0.01) +\n    geom_line(mapping = aes(x = 1:length(ZHJZ), y = ZHJZ, col = \"red\")) + labs(x = \"Date\", y = \"ZHJZ\") +\n    geom_hline(mapping = aes(yintercept = 1), lty = 2, col = \"deepskyblue\")\n  }\n}))\n#==============================================================================================================================================\noutput$QSRtable <- compiler::cmpfun(DT::renderDataTable({\n  QSRInput()\n  }))\noutput$plot <- compiler::cmpfun(renderPlot({\n  JZTinput()\n  }))\n#------------------------------------------------------------------------------------------------------------------------------------------\noutput$DD_QSR <- compiler::cmpfun(downloadHandler(\n  filename = function(){\n    paste('QSR.csv', sep='')\n    },content = function(file){\n      write.csv(QSRInput(), file)\n      }))\n#-------------------------------------------------------------------------------------------------------------------------------------------\n})\n",
    "created" : 1493992456152.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3886755139",
    "id" : "FD726B04",
    "lastKnownWriteTime" : 1493993599,
    "last_content_update" : 1493993599711,
    "path" : "~/My/R.workplace/Shinyapp/A combination of liquidation/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}